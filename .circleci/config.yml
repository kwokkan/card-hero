version: 2.1
parameters:
  configuration:
    type: string
    default: "Release"
  node-project:
    type: string
    default: "apps/CardHero.Frontend.React"
  publish-project:
    type: string
    default: "apps/CardHero.NetCoreApp.TypeScript"
  solution:
    type: string
    default: "CardHero.sln"
jobs:
  init-workspace:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0.300-buster-slim
    steps:
      - checkout
      - run: |
          cd << pipeline.parameters.publish-project >>
          rm -r ./wwwroot/dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  dotnet-build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0.300-buster-slim
    steps:
      - attach_workspace:
          at: .
      - run: |
          dotnet restore << pipeline.parameters.solution >>
      - run: |
          dotnet build << pipeline.parameters.solution >> --no-restore
      - run: |
          dotnet test << pipeline.parameters.solution >> --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=\"lcov,opencover\" /p:nodereuse=false
      - persist_to_workspace:
          root: .
          paths:
            - tests

  dotnet-publish:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0.300-buster-slim
    steps:
      - attach_workspace:
          at: .
      - run: |
          dotnet publish << pipeline.parameters.publish-project >> --configuration << pipeline.parameters.configuration >> --output publish
      - save_cache:
          key: publish-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - publish
      - store_artifacts:
          path: publish

  go-live:
    docker:
      - image: node:16.5.0-buster
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - publish-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
      - run: |
          apt-get -y update
          apt-get -y install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg2 \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
          add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/debian \
            $(lsb_release -cs) \
            stable"
          apt-get -y update
          apt-get -y install docker-ce docker-ce-cli containerd.io
          docker -v
      - run: |
          cd publish
          yarn global add heroku
          docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
          docker build . -t card-hero/frontend -f Dockerfile
          heroku container:push web -a card-hero
          heroku container:release web -a card-hero

  npm-build:
    docker:
      - image: node:16.5.0-buster
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - yarn-cache-v4-{{ arch }}-{{ checksum "<< pipeline.parameters.node-project >>/yarn.lock" }}
            - yarn-cache-v4-{{ arch }}-
      - run:
          name: node install
          command: |
            cd << pipeline.parameters.node-project >>
            mv config/.yarnclean .yarnclean
            yarn install --frozen-lockfile
      - run:
          name: yarn build:prod
          command: |
            cd << pipeline.parameters.node-project >>
            yarn build:prod
      - run:
          name: yarn test
          command: |
            cd << pipeline.parameters.node-project >>
            yarn test
      - save_cache:
          key: yarn-cache-v4-{{ arch }}-{{ checksum "<< pipeline.parameters.node-project >>/yarn.lock" }}
          paths:
            - << pipeline.parameters.node-project >>/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.publish-project >>/wwwroot
            - << pipeline.parameters.node-project >>/obj/coverage/js

  upload-coverage:
    docker:
      - image: node:16.5.0-buster
    steps:
      - attach_workspace:
          at: .
      - run:
          name: upload coverage
          command: |
            chmod +x ./scripts/codecov.sh
            ./scripts/codecov.sh -s tests -F dotnet
            ./scripts/codecov.sh -s << pipeline.parameters.node-project >> -F npm
workflows:
  version: 2
  run-all:
    jobs:
      - init-workspace

      - dotnet-build:
          requires:
            - init-workspace

      - npm-build:
          requires:
            - init-workspace

      - upload-coverage:
          requires:
            - dotnet-build
            - npm-build

      - dotnet-publish:
          requires:
            - npm-build
          filters:
            branches:
              only:
                - master

      - go-live:
          requires:
            - dotnet-publish
