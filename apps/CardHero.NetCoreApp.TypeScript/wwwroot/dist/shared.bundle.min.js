(window["wj"] = window["wj"] || []).push([["shared"],{

/***/ "0M2A":
/*!**********************************************!*\
  !*** ./src/components/shared/CoinFormat.tsx ***!
  \**********************************************/
/*! exports provided: CoinFormat */
/*! exports used: CoinFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CoinFormat; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../styles/index */ "JatN");


const coinRender = (className, value, stripEmpty) => {
    const shouldStrip = stripEmpty && value === 0;
    if (shouldStrip) {
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", { className: "coin-group" },
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_1__[/* Icon */ "a"], { icon: "coins", className: className }),
        ' ',
        value));
};
function CoinFormat(props) {
    if (props.coins < 0)
        return null;
    const c = props.coins;
    const gold = Math.floor(c / 10000);
    const silver = Math.floor(c / 100) % 100;
    const bronze = c % 100;
    const se = props.stripEmpty === true;
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", { title: props.title },
        coinRender("coin-gold", gold, se),
        coinRender("coin-silver", silver, se),
        coinRender("coin-bronze", bronze, se)));
}


/***/ }),

/***/ "0Rbv":
/*!*********************************************!*\
  !*** ./src/components/shared/ErrorView.tsx ***!
  \*********************************************/
/*! exports provided: ErrorView */
/*! exports used: ErrorView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ErrorView; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../clients/clients */ "bcsp");
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles/index */ "JatN");



class ErrorView extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
    render() {
        const e = this.props.error;
        const ei = this.props.errorInfo;
        const cp = this.props.currentPage || 'N/A';
        const newIssueUrl = new URL("https://github.com/kwokkan/card-hero/issues/new");
        newIssueUrl.searchParams.append('title', e.name + ': ' + e.message);
        newIssueUrl.searchParams.append('body', '### Current page\n' + cp + '\n\n### Stack trace\n```\n' + e.stack + '\n```');
        newIssueUrl.searchParams.append('labels', 'bug');
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "container-fluid body-content" },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "row" },
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card mx-auto" },
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h4", { className: "card-header" }, "Oops"),
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card-body" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", { className: "card-text" }, "Looks like some bugs have managed to creep in."),
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", { className: "card-text text-center" }, Array(_clients_clients__WEBPACK_IMPORTED_MODULE_1__[/* Rarity */ "k"].Legendary).fill(0).map((_, i) => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { key: i, icon: "bug", className: 'text-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__[/* Rarity */ "k"][i + 1].toLowerCase() }))),
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card-text text-muted" },
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("details", null,
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("summary", null,
                                    e.name,
                                    ": ",
                                    e.message),
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("pre", { id: "stacktrace" }, e.stack))),
                        ei &&
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", { className: "card-text text-muted" }, ei.componentStack)),
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { href: newIssueUrl.toString(), className: "btn btn-primary pull-right", target: "_blank", rel: "noreferrer noopener" },
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { icon: "github" }),
                            ' ',
                            "Report an issue"))))));
    }
}


/***/ }),

/***/ "5i9o":
/*!*************************************!*\
  !*** ./src/services/CardService.ts ***!
  \*************************************/
/*! exports provided: CardService */
/*! exports used: CardService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class CardService {
    static async getCards(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* CardApiClient */ "b"]();
        const model = client.get(filter.ids, filter.name, filter.page, filter.pageSize);
        return model;
    }
}


/***/ }),

/***/ "8psu":
/*!***********************************************!*\
  !*** ./src/components/shared/AppBootstrap.ts ***!
  \***********************************************/
/*! exports provided: AppBootstrap */
/*! exports used: AppBootstrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppBootstrap; });
class AppBootstrap {
    static url(...parts) {
        return AppBootstrap.baseUrl + parts.join('/');
    }
}
AppBootstrap.baseUrl = document.querySelector('base').getAttribute('href');
AppBootstrap.rootElement = document.getElementById('root');


/***/ }),

/***/ "8wFB":
/*!**********************************************!*\
  !*** ./src/components/shared/DateFormat.tsx ***!
  \**********************************************/
/*! exports provided: DateFormat */
/*! exports used: DateFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DateFormat; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/date */ "XrP9");


function DateFormat(props) {
    const d = Object(_utils_date__WEBPACK_IMPORTED_MODULE_1__[/* relativeFromNow */ "a"])(props.date);
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("time", { title: props.date.toUTCString(), dateTime: Object(_utils_date__WEBPACK_IMPORTED_MODULE_1__[/* toISOString */ "b"])(props.date) }, d));
}


/***/ }),

/***/ "9V4R":
/*!*************************************!*\
  !*** ./src/services/DeckService.ts ***!
  \*************************************/
/*! exports provided: DeckService */
/*! exports used: DeckService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeckService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class DeckService {
    static async getDecks(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* DeckApiClient */ "d"]();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.ids, filter.name, filter.page, filter.pageSize);
        return model;
    }
    static async createDeck(model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* DeckApiClient */ "d"]();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* DeckCreateModel */ "e"]();
        postModel.name = model.name;
        postModel.description = model.description;
        var newModel = await client.create(postModel);
        return newModel;
    }
}


/***/ }),

/***/ "9pzt":
/*!*******************************************!*\
  !*** ./src/components/shared/NavMenu.tsx ***!
  \*******************************************/
/*! exports provided: NavMenu */
/*! exports used: NavMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NavMenu; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-router-dom */ "55Ip");
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles/index */ "JatN");
/* harmony import */ var _utils_route__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/route */ "TvAS");
/* harmony import */ var _CoinFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CoinFormat */ "0M2A");





class NavMenu extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
    constructor(props) {
        super(props);
    }
    render() {
        const appName = this.props.appName;
        const routePrefix = Object(_utils_route__WEBPACK_IMPORTED_MODULE_3__[/* getRoutePrefix */ "a"])(this.props.routePrefix);
        const user = this.props.user;
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("nav", { className: "navbar navbar-dark bg-dark navbar-expand-md fixed-top" },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", { className: "navbar-toggler navbar-toggler-right", type: "button", "data-toggle": "collapse", "data-target": "#navbar-header", "aria-controls": "navbar-header", "aria-expanded": "false", "aria-label": "Toggle navigation" },
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { icon: "bars" })),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { to: routePrefix, className: "navbar-brand" },
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("img", { src: `${routePrefix}favicon.ico`, className: "d-inline-block align-top", width: "32", height: "32", alt: appName }),
                ' ',
                appName),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "collapse navbar-collapse", id: "navbar-header" },
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", { className: "navbar-nav" },
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { className: "nav-link", to: `${routePrefix}Card` }, "Cards")),
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { className: "nav-link", to: `${routePrefix}Game` }, "Games")),
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { className: "nav-link", to: `${routePrefix}Store` }, "Store")),
                    user &&
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null,
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { className: "nav-link", to: `${routePrefix}Collection` }, "Collection")),
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__[/* Link */ "b"], { className: "nav-link", to: `${routePrefix}Deck` }, "Decks")))),
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", { className: "navbar-nav ml-auto" },
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "nav-link", href: "https://github.com/kwokkan/card-hero", target: "_blank", rel: "noreferrer noopener" },
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { icon: "github" }),
                            ' ',
                            "Fork me")),
                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "nav-link", href: `${routePrefix}swagger`, target: "_blank", rel: "noreferrer noopener" },
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { icon: "code" }),
                            ' ',
                            "API")),
                    user ?
                        (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null,
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "nav-link" },
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_CoinFormat__WEBPACK_IMPORTED_MODULE_4__[/* CoinFormat */ "a"], { coins: user.coins, title: `You have ${user.coins} coins` }))),
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item dropdown" },
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "nav-link dropdown-toggle", id: "user-navbar-dropdown-menu", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, user.fullName),
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "user-navbar-dropdown-menu" },
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "dropdown-item", href: "#" }, "Profile"),
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "dropdown-item", href: "#" }, "Active Games"),
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "dropdown-divider" }),
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "dropdown-item", href: "#" }, "Settings"),
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "dropdown-divider" }),
                                    react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "dropdown-item", href: `${routePrefix}SignOut` }, "Logout")))))
                        :
                            (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", { className: "nav-item" },
                                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { className: "nav-link", href: `${routePrefix}SignIn` }, "Sign in")))))));
    }
}


/***/ }),

/***/ "CDIa":
/*!****************************************!*\
  !*** ./src/contexts/AccountContext.ts ***!
  \****************************************/
/*! exports provided: AccountContext */
/*! exports used: AccountContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountContext; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const AccountContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({ setUser: (_user) => { } });


/***/ }),

/***/ "JatN":
/*!******************************!*\
  !*** ./src/styles/index.tsx ***!
  \******************************/
/*! exports provided: Icon */
/*! exports used: Icon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Icon; });
/* harmony import */ var _fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ "7O5W");
/* harmony import */ var _fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fortawesome/free-brands-svg-icons */ "8tEE");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "wHSu");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "IP2g");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! chart.js */ "MO+k");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);






chart_js__WEBPACK_IMPORTED_MODULE_4__["platform"].disableCSSInjection = true;
_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_0__[/* config */ "a"].autoAddCss = false;
_fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_1__[/* faGithub */ "a"].prefix = "fas";
_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_0__[/* library */ "c"].add(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faBars */ "a"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faBug */ "b"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faCode */ "c"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faCoins */ "d"], _fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_1__[/* faGithub */ "a"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faPlus */ "e"], _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__[/* faStar */ "f"]);
function Icon(props) {
    return (react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__[/* FontAwesomeIcon */ "a"], Object.assign({ icon: props.icon, fixedWidth: true }, props)));
}


/***/ }),

/***/ "LxJj":
/*!**************************************!*\
  !*** ./src/services/StoreService.ts ***!
  \**************************************/
/*! exports provided: StoreService */
/*! exports used: StoreService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StoreService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class StoreService {
    static async getStoreItems() {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* StoreApiClient */ "l"]();
        const model = await client.get();
        return model;
    }
    static async buyCardBundle(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* StoreApiClient */ "l"]();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* StoreItemModel */ "m"]({
            id: id
        });
        const model = await client.buyStoreItem(postModel);
        return model;
    }
}


/***/ }),

/***/ "NaBN":
/*!*******************************************!*\
  !*** ./src/components/shared/DragType.ts ***!
  \*******************************************/
/*! exports provided: DragType */
/*! exports used: DragType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DragType; });
var DragType;
(function (DragType) {
    DragType[DragType["Card"] = 0] = "Card";
})(DragType || (DragType = {}));


/***/ }),

/***/ "TvAS":
/*!****************************!*\
  !*** ./src/utils/route.ts ***!
  \****************************/
/*! exports provided: getRoutePrefix */
/*! exports used: getRoutePrefix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getRoutePrefix; });
const getRoutePrefix = (prefix) => {
    if (!prefix) {
        return "/";
    }
    if (prefix.endsWith("/")) {
        return prefix;
    }
    return prefix + "/";
};


/***/ }),

/***/ "XrP9":
/*!***************************!*\
  !*** ./src/utils/date.ts ***!
  \***************************/
/*! exports provided: relativeFromNow, toISOString */
/*! exports used: relativeFromNow, toISOString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return relativeFromNow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return toISOString; });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "Wgwc");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs/plugin/relativeTime */ "QgiU");
/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1__);


dayjs__WEBPACK_IMPORTED_MODULE_0___default.a.extend(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1___default.a);
function relativeFromNow(date) {
    return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(date).fromNow();
}
function toISOString(date) {
    return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(date).toISOString();
}


/***/ }),

/***/ "bcsp":
/*!********************************!*\
  !*** ./src/clients/clients.ts ***!
  \********************************/
/*! exports provided: AccountApiClient, CardApiClient, CollectionApiClient, DeckApiClient, GameApiClient, StoreApiClient, UserModel, ErrorViewModel, CardModel, Rarity, CardCollectionModel, DeckModel, DeckCardModel, DeckCreateModel, GameModel, GameUserModel, TurnModel, GameType, GameDeckModel, GameDeckCardCollectionModel, GameViewModel, GameCreateModel, JoinGameViewModel, GameTripleTriadMoveViewModel, StoreItemModel, ApiException */
/*! exports used: AccountApiClient, CardApiClient, CollectionApiClient, DeckApiClient, DeckCreateModel, GameApiClient, GameCreateModel, GameTripleTriadMoveViewModel, GameType, JoinGameViewModel, Rarity, StoreApiClient, StoreItemModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountApiClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CardApiClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CollectionApiClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return DeckApiClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return GameApiClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return StoreApiClient; });
/* unused harmony export UserModel */
/* unused harmony export ErrorViewModel */
/* unused harmony export CardModel */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return Rarity; });
/* unused harmony export CardCollectionModel */
/* unused harmony export DeckModel */
/* unused harmony export DeckCardModel */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DeckCreateModel; });
/* unused harmony export GameModel */
/* unused harmony export GameUserModel */
/* unused harmony export TurnModel */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return GameType; });
/* unused harmony export GameDeckModel */
/* unused harmony export GameDeckCardCollectionModel */
/* unused harmony export GameViewModel */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return GameCreateModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return JoinGameViewModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return GameTripleTriadMoveViewModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return StoreItemModel; });
/* unused harmony export ApiException */
/* harmony import */ var _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CardHeroApiClientBase */ "jzhy");

class AccountApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get() {
        let url_ = this.baseUrl + "/api/account";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else {
            return response.text().then((_responseText) => {
                let resultdefault = null;
                let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                resultdefault = ErrorViewModel.fromJS(resultDatadefault);
                return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            });
        }
    }
}
class CardApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(ids, name, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/cards?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CardModel.fromJS(item));
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class CollectionApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(ids, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/collections?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CardCollectionModel.fromJS(item));
                }
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class DeckApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(ids, name, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/decks?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DeckModel.fromJS(item));
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    create(model) {
        let url_ = this.baseUrl + "/api/decks";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreate(_response);
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = DeckModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getById(id) {
        let url_ = this.baseUrl + "/api/decks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetById(_response);
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DeckModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class GameApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(gameId, name, startTime, endTime, playerCount, activeOnly, type, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/games?";
        if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        if (playerCount !== undefined)
            url_ += "PlayerCount=" + encodeURIComponent("" + playerCount) + "&";
        if (activeOnly === null)
            throw new Error("The parameter 'activeOnly' cannot be null.");
        else if (activeOnly !== undefined)
            url_ += "ActiveOnly=" + encodeURIComponent("" + activeOnly) + "&";
        if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(GameModel.fromJS(item));
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    post(model) {
        let url_ = this.baseUrl + "/api/games";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = GameModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getById(id) {
        let url_ = this.baseUrl + "/api/games/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetById(_response);
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GameViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    join(id, model) {
        let url_ = this.baseUrl + "/api/games/{id}/join";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processJoin(_response);
        });
    }
    processJoin(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GameUserModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    move(id, model) {
        let url_ = this.baseUrl + "/api/games/{id}/move";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMove(_response);
        });
    }
    processMove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = GameTripleTriadMoveViewModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class StoreApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__[/* CardHeroApiClientBase */ "a"] {
    constructor(baseUrl, http) {
        super();
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/store?";
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(StoreItemModel.fromJS(item));
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    buyStoreItem(storeItem) {
        let url_ = this.baseUrl + "/api/store";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(storeItem);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBuyStoreItem(_response);
        });
    }
    processBuyStoreItem(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData201)) {
                    result201 = [];
                    for (let item of resultData201)
                        result201.push(CardCollectionModel.fromJS(item));
                }
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class UserModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.identifier = _data["identifier"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.fullName = _data["fullName"];
            this.idPsource = _data["idPsource"];
            this.coins = _data["coins"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["identifier"] = this.identifier;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["fullName"] = this.fullName;
        data["idPsource"] = this.idPsource;
        data["coins"] = this.coins;
        return data;
    }
}
class ErrorViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["stackTrace"])) {
                this.stackTrace = [];
                for (let item of _data["stackTrace"])
                    this.stackTrace.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.stackTrace)) {
            data["stackTrace"] = [];
            for (let item of this.stackTrace)
                data["stackTrace"].push(item);
        }
        return data;
    }
}
class CardModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.upAttack = _data["upAttack"];
            this.rightAttack = _data["rightAttack"];
            this.downAttack = _data["downAttack"];
            this.leftAttack = _data["leftAttack"];
            this.health = _data["health"];
            this.attack = _data["attack"];
            this.defence = _data["defence"];
            this.totalStats = _data["totalStats"];
            this.isFavourited = _data["isFavourited"];
            this.rarity = _data["rarity"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CardModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["upAttack"] = this.upAttack;
        data["rightAttack"] = this.rightAttack;
        data["downAttack"] = this.downAttack;
        data["leftAttack"] = this.leftAttack;
        data["health"] = this.health;
        data["attack"] = this.attack;
        data["defence"] = this.defence;
        data["totalStats"] = this.totalStats;
        data["isFavourited"] = this.isFavourited;
        data["rarity"] = this.rarity;
        return data;
    }
}
var Rarity;
(function (Rarity) {
    Rarity[Rarity["Common"] = 1] = "Common";
    Rarity[Rarity["Uncommon"] = 2] = "Uncommon";
    Rarity[Rarity["Rare"] = 3] = "Rare";
    Rarity[Rarity["Epic"] = 4] = "Epic";
    Rarity[Rarity["Legendary"] = 5] = "Legendary";
})(Rarity || (Rarity = {}));
class CardCollectionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.cardId = _data["cardId"];
            this.userId = _data["userId"];
            this.card = _data["card"] ? CardModel.fromJS(_data["card"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CardCollectionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cardId"] = this.cardId;
        data["userId"] = this.userId;
        data["card"] = this.card ? this.card.toJSON() : undefined;
        return data;
    }
}
class DeckModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.maxCards = _data["maxCards"];
            this.isFavourited = _data["isFavourited"];
            if (Array.isArray(_data["cards"])) {
                this.cards = [];
                for (let item of _data["cards"])
                    this.cards.push(DeckCardModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["maxCards"] = this.maxCards;
        data["isFavourited"] = this.isFavourited;
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        return data;
    }
}
class DeckCardModel extends CardModel {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.cardCollectionId = _data["cardCollectionId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckCardModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["cardCollectionId"] = this.cardCollectionId;
        super.toJSON(data);
        return data;
    }
}
class DeckCreateModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckCreateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
class GameModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(GameUserModel.fromJS(item));
            }
            if (Array.isArray(_data["turns"])) {
                this.turns = [];
                for (let item of _data["turns"])
                    this.turns.push(TurnModel.fromJS(item));
            }
            this.currentGameUserId = _data["currentGameUserId"];
            this.currentUser = _data["currentUser"] ? UserModel.fromJS(_data["currentUser"]) : undefined;
            this.winner = _data["winner"] ? UserModel.fromJS(_data["winner"]) : undefined;
            this.columns = _data["columns"];
            this.rows = _data["rows"];
            this.type = _data["type"];
            this.deckId = _data["deckId"];
            this.deck = _data["deck"] ? DeckModel.fromJS(_data["deck"]) : undefined;
            this.gameDeckId = _data["gameDeckId"];
            this.gameDeck = _data["gameDeck"] ? GameDeckModel.fromJS(_data["gameDeck"]) : undefined;
            this.maxUsers = _data["maxUsers"];
            this.canJoin = _data["canJoin"];
            this.canPlay = _data["canPlay"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.turns)) {
            data["turns"] = [];
            for (let item of this.turns)
                data["turns"].push(item.toJSON());
        }
        data["currentGameUserId"] = this.currentGameUserId;
        data["currentUser"] = this.currentUser ? this.currentUser.toJSON() : undefined;
        data["winner"] = this.winner ? this.winner.toJSON() : undefined;
        data["columns"] = this.columns;
        data["rows"] = this.rows;
        data["type"] = this.type;
        data["deckId"] = this.deckId;
        data["deck"] = this.deck ? this.deck.toJSON() : undefined;
        data["gameDeckId"] = this.gameDeckId;
        data["gameDeck"] = this.gameDeck ? this.gameDeck.toJSON() : undefined;
        data["maxUsers"] = this.maxUsers;
        data["canJoin"] = this.canJoin;
        data["canPlay"] = this.canPlay;
        return data;
    }
}
class GameUserModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? UserModel.fromJS(_data["user"]) : undefined;
            this.gameId = _data["gameId"];
            this.order = _data["order"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameUserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["gameId"] = this.gameId;
        data["order"] = this.order;
        return data;
    }
}
class TurnModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : undefined;
            this.user = _data["user"] ? UserModel.fromJS(_data["user"]) : undefined;
            this.game = _data["game"] ? GameModel.fromJS(_data["game"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TurnModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["game"] = this.game ? this.game.toJSON() : undefined;
        return data;
    }
}
var GameType;
(function (GameType) {
    GameType[GameType["TripleTriad"] = 1] = "TripleTriad";
})(GameType || (GameType = {}));
class GameDeckModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.gameUserId = _data["gameUserId"];
            if (Array.isArray(_data["cardCollection"])) {
                this.cardCollection = [];
                for (let item of _data["cardCollection"])
                    this.cardCollection.push(GameDeckCardCollectionModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameDeckModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["gameUserId"] = this.gameUserId;
        if (Array.isArray(this.cardCollection)) {
            data["cardCollection"] = [];
            for (let item of this.cardCollection)
                data["cardCollection"].push(item.toJSON());
        }
        return data;
    }
}
class GameDeckCardCollectionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.gameDeckId = _data["gameDeckId"];
            this.cardId = _data["cardId"];
            this.card = _data["card"] ? CardModel.fromJS(_data["card"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameDeckCardCollectionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameDeckId"] = this.gameDeckId;
        data["cardId"] = this.cardId;
        data["card"] = this.card ? this.card.toJSON() : undefined;
        return data;
    }
}
class GameViewModel extends GameModel {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"];
            this.lastActivity = _data["lastActivity"] ? new Date(_data["lastActivity"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["lastActivity"] = this.lastActivity ? this.lastActivity.toISOString() : undefined;
        super.toJSON(data);
        return data;
    }
}
class GameCreateModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.deckId = _data["deckId"];
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(UserModel.fromJS(item));
            }
            this.currentGameUserId = _data["currentGameUserId"];
            this.maxPlayers = _data["maxPlayers"];
            this.columns = _data["columns"];
            this.rows = _data["rows"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameCreateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["deckId"] = this.deckId;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["currentGameUserId"] = this.currentGameUserId;
        data["maxPlayers"] = this.maxPlayers;
        data["columns"] = this.columns;
        data["rows"] = this.rows;
        return data;
    }
}
class JoinGameViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.deckId = _data["deckId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new JoinGameViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["deckId"] = this.deckId;
        return data;
    }
}
class GameTripleTriadMoveViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.row = _data["row"];
            this.column = _data["column"];
            this.cardId = _data["cardId"];
            this.gameDeckCardCollectionId = _data["gameDeckCardCollectionId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameTripleTriadMoveViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["column"] = this.column;
        data["cardId"] = this.cardId;
        data["gameDeckCardCollectionId"] = this.gameDeckCardCollectionId;
        return data;
    }
}
class StoreItemModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.cost = _data["cost"];
            this.itemCount = _data["itemCount"];
            this.expiry = _data["expiry"] ? new Date(_data["expiry"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StoreItemModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["cost"] = this.cost;
        data["itemCount"] = this.itemCount;
        data["expiry"] = this.expiry ? this.expiry.toISOString() : undefined;
        return data;
    }
}
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}


/***/ }),

/***/ "cccr":
/*!*************************************************!*\
  !*** ./src/components/shared/ErrorBoundary.tsx ***!
  \*************************************************/
/*! exports provided: ErrorBoundary */
/*! exports used: ErrorBoundary */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ErrorBoundary; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ErrorView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorView */ "0Rbv");


class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__["Component"] {
    constructor(props) {
        super(props);
        this.state = {
            hasError: false
        };
    }
    static getDerivedStateFromError(error) {
        const newState = {
            hasError: true,
            error: error,
            currentPage: window.location.href
        };
        if (true) {
            console.error(error);
        }
        return newState;
    }
    componentDidCatch(error, errorInfo) {
        if (true) {
            console.error(error, errorInfo);
        }
    }
    render() {
        if (this.state.hasError) {
            return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ErrorView__WEBPACK_IMPORTED_MODULE_1__[/* ErrorView */ "a"], { error: this.state.error, errorInfo: this.state.errorInfo, currentPage: this.state.currentPage });
        }
        return this.props.children;
    }
}


/***/ }),

/***/ "hD7t":
/*!****************************************!*\
  !*** ./src/services/AccountService.ts ***!
  \****************************************/
/*! exports provided: AccountService */
/*! exports used: AccountService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AccountService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class AccountService {
    static async getAccount() {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* AccountApiClient */ "a"]();
        const model = await client.get();
        return model;
    }
}


/***/ }),

/***/ "jzhy":
/*!**********************************************!*\
  !*** ./src/clients/CardHeroApiClientBase.ts ***!
  \**********************************************/
/*! exports provided: CardHeroApiClientBase */
/*! exports used: CardHeroApiClientBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardHeroApiClientBase; });
class CardHeroApiClientBase {
    getBaseUrl(defaultBaseUrl, _) {
        const baseUrl = CardHeroApiClientBase.baseUrl;
        if (!baseUrl) {
            return defaultBaseUrl;
        }
        if (baseUrl.endsWith('/')) {
            return baseUrl.substring(0, baseUrl.length - 2);
        }
        return baseUrl;
    }
}


/***/ }),

/***/ "stV9":
/*!***********************************************!*\
  !*** ./src/services/CardCollectionService.ts ***!
  \***********************************************/
/*! exports provided: CardCollectionService */
/*! exports used: CardCollectionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardCollectionService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class CardCollectionService {
    static async getCollection(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* CollectionApiClient */ "c"]();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.ids, filter.page, filter.pageSize);
        return model;
    }
}


/***/ }),

/***/ "tQ8j":
/*!*************************************!*\
  !*** ./src/services/GameService.ts ***!
  \*************************************/
/*! exports provided: GameService */
/*! exports used: GameService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GameService; });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ "bcsp");

class GameService {
    static async getGameById(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* GameApiClient */ "f"]();
        const model = await client.getById(id);
        return model;
    }
    static async getGames(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* GameApiClient */ "f"]();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.gameId, filter.name, undefined, undefined, undefined, filter.activeOnly, undefined, filter.page, filter.pageSize, undefined);
        return model;
    }
    static async createGame(model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* GameApiClient */ "f"]();
        const newModel = await client.post(model);
        return newModel;
    }
    static async join(id, deckId) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* GameApiClient */ "f"]();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* JoinGameViewModel */ "j"]({
            deckId: deckId
        });
        const model = await client.join(id, postModel);
        return model;
    }
    static async move(id, model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__[/* GameApiClient */ "f"]();
        const newModel = await client.move(id, model);
        return newModel;
    }
}


/***/ }),

/***/ "tnFb":
/*!**********************************************!*\
  !*** ./src/components/shared/CardWidget.tsx ***!
  \**********************************************/
/*! exports provided: CardWidget */
/*! exports used: CardWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardWidget; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "q1tI");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../clients/clients */ "bcsp");
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles/index */ "JatN");



function CardWidget(props) {
    const c = props.card;
    if (!c) {
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: 'card collection-card card-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__[/* Rarity */ "k"][c.rarity].toLowerCase() },
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card-body" },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", { className: "text-center", title: "Up attack" }, c.upAttack),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", { className: "float-right", title: "Right attack" }, c.rightAttack),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", { title: "Left attack" }, c.leftAttack),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", { className: "text-center", title: "Down attack" }, c.downAttack)),
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "card-footer" },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2", { className: 'text-center card-rarity-symbols text-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__[/* Rarity */ "k"][c.rarity].toLowerCase(), title: _clients_clients__WEBPACK_IMPORTED_MODULE_1__[/* Rarity */ "k"][c.rarity] }, Array(c.rarity).fill(0).map((_, i) => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_styles_index__WEBPACK_IMPORTED_MODULE_2__[/* Icon */ "a"], { key: i, icon: "star" }))),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", { className: "text-center", title: c.name }, c.name))));
}


/***/ })

}]);