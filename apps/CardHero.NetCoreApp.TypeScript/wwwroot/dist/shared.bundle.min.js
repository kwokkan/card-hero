"use strict";
(self["wj"] = self["wj"] || []).push([[712],{

/***/ 1820:
/*!**********************************************!*\
  !*** ./src/clients/CardHeroApiClientBase.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardHeroApiClientBase": () => (/* binding */ CardHeroApiClientBase)
/* harmony export */ });
class CardHeroApiClientBase {
    static baseUrl;
    getBaseUrl(defaultBaseUrl, _) {
        const baseUrl = CardHeroApiClientBase.baseUrl;
        if (!baseUrl) {
            return defaultBaseUrl;
        }
        if (baseUrl.endsWith('/')) {
            return baseUrl.substring(0, baseUrl.length - 2);
        }
        return baseUrl;
    }
}


/***/ }),

/***/ 1927:
/*!********************************!*\
  !*** ./src/clients/clients.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountApiClient": () => (/* binding */ AccountApiClient),
/* harmony export */   "ApiException": () => (/* binding */ ApiException),
/* harmony export */   "CardApiClient": () => (/* binding */ CardApiClient),
/* harmony export */   "CardPackApiClient": () => (/* binding */ CardPackApiClient),
/* harmony export */   "CollectionApiClient": () => (/* binding */ CollectionApiClient),
/* harmony export */   "DeckApiClient": () => (/* binding */ DeckApiClient),
/* harmony export */   "DeckCardModel": () => (/* binding */ DeckCardModel),
/* harmony export */   "DeckCreateModel": () => (/* binding */ DeckCreateModel),
/* harmony export */   "DeckModel": () => (/* binding */ DeckModel),
/* harmony export */   "ErrorViewModel": () => (/* binding */ ErrorViewModel),
/* harmony export */   "GameApiClient": () => (/* binding */ GameApiClient),
/* harmony export */   "GameCreateModel": () => (/* binding */ GameCreateModel),
/* harmony export */   "GameJoinModel": () => (/* binding */ GameJoinModel),
/* harmony export */   "GamePlayApiClient": () => (/* binding */ GamePlayApiClient),
/* harmony export */   "GameType": () => (/* binding */ GameType),
/* harmony export */   "MoveModel": () => (/* binding */ MoveModel),
/* harmony export */   "Rarity": () => (/* binding */ Rarity),
/* harmony export */   "StoreApiClient": () => (/* binding */ StoreApiClient)
/* harmony export */ });
/* unused harmony exports UserModel, CardModel, RarityModel, CardPackModel, CardCollectionModel, GameModel, GamePlayModel, GameDeckModel, GameDeckCardCollectionModel, StoreItemModel */
/* harmony import */ var _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CardHeroApiClientBase */ 1820);

class AccountApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get() {
        let url_ = this.baseUrl + "/api/account";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else {
            return response.text().then((_responseText) => {
                let resultdefault = null;
                let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                resultdefault = ErrorViewModel.fromJS(resultDatadefault);
                return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            });
        }
    }
}
class CardApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(ids, name, cardPackId, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/cards?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (cardPackId !== undefined && cardPackId !== null)
            url_ += "CardPackId=" + encodeURIComponent("" + cardPackId) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined && sort !== null)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CardModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    favourite(id) {
        let url_ = this.baseUrl + "/api/cards/{id}/favourite";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFavourite(_response);
        });
    }
    processFavourite(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class CardPackApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get() {
        let url_ = this.baseUrl + "/api/packs";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CardPackModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class CollectionApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(name, ids, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/collections?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined && sort !== null)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CardCollectionModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class DeckApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(ids, name, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/decks?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined && sort !== null)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DeckModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    create(model) {
        let url_ = this.baseUrl + "/api/decks";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCreate(_response);
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = DeckModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getById(id) {
        let url_ = this.baseUrl + "/api/decks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetById(_response);
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DeckModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    patch(id, model) {
        let url_ = this.baseUrl + "/api/decks/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPatch(_response);
        });
    }
    processPatch(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    favourite(id, model) {
        let url_ = this.baseUrl + "/api/decks/{id}/favourite";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processFavourite(_response);
        });
    }
    processFavourite(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class GameApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(gameId, name, startTime, endTime, playerCount, activeOnly, type, page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/games?";
        if (gameId !== undefined && gameId !== null)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (startTime !== undefined && startTime !== null)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        if (playerCount !== undefined && playerCount !== null)
            url_ += "PlayerCount=" + encodeURIComponent("" + playerCount) + "&";
        if (activeOnly === null)
            throw new Error("The parameter 'activeOnly' cannot be null.");
        else if (activeOnly !== undefined)
            url_ += "ActiveOnly=" + encodeURIComponent("" + activeOnly) + "&";
        if (type !== undefined && type !== null)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined && sort !== null)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(GameModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    post(model) {
        let url_ = this.baseUrl + "/api/games";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = GameModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getById(id) {
        let url_ = this.baseUrl + "/api/games/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetById(_response);
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GameModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    join(id, model) {
        let url_ = this.baseUrl + "/api/games/{id}/join";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processJoin(_response);
        });
    }
    processJoin(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class GamePlayApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    getById(id) {
        let url_ = this.baseUrl + "/api/play/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetById(_response);
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GamePlayModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    move(id, model) {
        let url_ = this.baseUrl + "/api/play/{id}/move";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(model);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processMove(_response);
        });
    }
    processMove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = MoveModel.fromJS(resultData201);
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorViewModel.fromJS(resultData404);
                return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class StoreApiClient extends _CardHeroApiClientBase__WEBPACK_IMPORTED_MODULE_0__.CardHeroApiClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    get(page, pageSize, sort) {
        let url_ = this.baseUrl + "/api/store?";
        if (page !== undefined && page !== null)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sort !== undefined && sort !== null)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(StoreItemModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    buyStoreItem(id) {
        let url_ = this.baseUrl + "/api/store/{id}/buy";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processBuyStoreItem(_response);
        });
    }
    processBuyStoreItem(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorViewModel.fromJS(resultData400);
                return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 201) {
            return response.text().then((_responseText) => {
                let result201 = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData201)) {
                    result201 = [];
                    for (let item of resultData201)
                        result201.push(CardCollectionModel.fromJS(item));
                }
                else {
                    result201 = null;
                }
                return result201;
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ErrorViewModel.fromJS(resultData401);
                return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
class ErrorViewModel {
    message;
    stackTrace;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["stackTrace"])) {
                this.stackTrace = [];
                for (let item of _data["stackTrace"])
                    this.stackTrace.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.stackTrace)) {
            data["stackTrace"] = [];
            for (let item of this.stackTrace)
                data["stackTrace"].push(item);
        }
        return data;
    }
}
class UserModel {
    id;
    identifier;
    createdDate;
    fullName;
    idPsource;
    coins;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.identifier = _data["identifier"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.fullName = _data["fullName"];
            this.idPsource = _data["idPsource"];
            this.coins = _data["coins"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["identifier"] = this.identifier;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["fullName"] = this.fullName;
        data["idPsource"] = this.idPsource;
        data["coins"] = this.coins;
        return data;
    }
}
class CardModel {
    id;
    name;
    description;
    upAttack;
    rightAttack;
    downAttack;
    leftAttack;
    health;
    attack;
    defence;
    totalStats;
    isFavourited;
    rarity;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.upAttack = _data["upAttack"];
            this.rightAttack = _data["rightAttack"];
            this.downAttack = _data["downAttack"];
            this.leftAttack = _data["leftAttack"];
            this.health = _data["health"];
            this.attack = _data["attack"];
            this.defence = _data["defence"];
            this.totalStats = _data["totalStats"];
            this.isFavourited = _data["isFavourited"];
            this.rarity = _data["rarity"] ? RarityModel.fromJS(_data["rarity"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CardModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["upAttack"] = this.upAttack;
        data["rightAttack"] = this.rightAttack;
        data["downAttack"] = this.downAttack;
        data["leftAttack"] = this.leftAttack;
        data["health"] = this.health;
        data["attack"] = this.attack;
        data["defence"] = this.defence;
        data["totalStats"] = this.totalStats;
        data["isFavourited"] = this.isFavourited;
        data["rarity"] = this.rarity ? this.rarity.toJSON() : undefined;
        return data;
    }
}
class RarityModel {
    id;
    name;
    frequency;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.frequency = _data["frequency"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RarityModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["frequency"] = this.frequency;
        return data;
    }
}
var Rarity;
(function (Rarity) {
    Rarity[Rarity["Common"] = 1] = "Common";
    Rarity[Rarity["Uncommon"] = 2] = "Uncommon";
    Rarity[Rarity["Rare"] = 3] = "Rare";
    Rarity[Rarity["Epic"] = 4] = "Epic";
    Rarity[Rarity["Legendary"] = 5] = "Legendary";
})(Rarity || (Rarity = {}));
class CardPackModel {
    id;
    name;
    description;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CardPackModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
class CardCollectionModel {
    id;
    cardId;
    userId;
    card;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.cardId = _data["cardId"];
            this.userId = _data["userId"];
            this.card = _data["card"] ? CardModel.fromJS(_data["card"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CardCollectionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cardId"] = this.cardId;
        data["userId"] = this.userId;
        data["card"] = this.card ? this.card.toJSON() : undefined;
        return data;
    }
}
class DeckModel {
    id;
    name;
    description;
    maxCards;
    isFavourited;
    cards;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.maxCards = _data["maxCards"];
            this.isFavourited = _data["isFavourited"];
            if (Array.isArray(_data["cards"])) {
                this.cards = [];
                for (let item of _data["cards"])
                    this.cards.push(DeckCardModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["maxCards"] = this.maxCards;
        data["isFavourited"] = this.isFavourited;
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        return data;
    }
}
class DeckCardModel {
    cardCollectionId;
    card;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.cardCollectionId = _data["cardCollectionId"];
            this.card = _data["card"] ? CardModel.fromJS(_data["card"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckCardModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["cardCollectionId"] = this.cardCollectionId;
        data["card"] = this.card ? this.card.toJSON() : undefined;
        return data;
    }
}
class DeckCreateModel {
    name;
    description;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeckCreateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
class GameModel {
    id;
    startTime;
    endTime;
    userIds;
    currentUserId;
    winnerUserId;
    columns;
    rows;
    type;
    maxUsers;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : undefined;
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [];
                for (let item of _data["userIds"])
                    this.userIds.push(item);
            }
            this.currentUserId = _data["currentUserId"];
            this.winnerUserId = _data["winnerUserId"];
            this.columns = _data["columns"];
            this.rows = _data["rows"];
            this.type = _data["type"];
            this.maxUsers = _data["maxUsers"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["currentUserId"] = this.currentUserId;
        data["winnerUserId"] = this.winnerUserId;
        data["columns"] = this.columns;
        data["rows"] = this.rows;
        data["type"] = this.type;
        data["maxUsers"] = this.maxUsers;
        return data;
    }
}
var GameType;
(function (GameType) {
    GameType[GameType["Standard"] = 1] = "Standard";
})(GameType || (GameType = {}));
class GameCreateModel {
    type;
    deckId;
    users;
    maxPlayers;
    columns;
    rows;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.deckId = _data["deckId"];
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(UserModel.fromJS(item));
            }
            this.maxPlayers = _data["maxPlayers"];
            this.columns = _data["columns"];
            this.rows = _data["rows"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameCreateModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["deckId"] = this.deckId;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["maxPlayers"] = this.maxPlayers;
        data["columns"] = this.columns;
        data["rows"] = this.rows;
        return data;
    }
}
class GameJoinModel {
    userId;
    deckId;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userId = _data["userId"];
            this.deckId = _data["deckId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameJoinModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["deckId"] = this.deckId;
        return data;
    }
}
class GamePlayModel {
    game;
    playedCards;
    moves;
    gameDeckId;
    gameDeck;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.game = _data["game"] ? GameModel.fromJS(_data["game"]) : undefined;
            if (Array.isArray(_data["playedCards"])) {
                this.playedCards = [];
                for (let item of _data["playedCards"])
                    this.playedCards.push(CardModel.fromJS(item));
            }
            if (Array.isArray(_data["moves"])) {
                this.moves = [];
                for (let item of _data["moves"])
                    this.moves.push(MoveModel.fromJS(item));
            }
            this.gameDeckId = _data["gameDeckId"];
            this.gameDeck = _data["gameDeck"] ? GameDeckModel.fromJS(_data["gameDeck"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GamePlayModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["game"] = this.game ? this.game.toJSON() : undefined;
        if (Array.isArray(this.playedCards)) {
            data["playedCards"] = [];
            for (let item of this.playedCards)
                data["playedCards"].push(item.toJSON());
        }
        if (Array.isArray(this.moves)) {
            data["moves"] = [];
            for (let item of this.moves)
                data["moves"].push(item.toJSON());
        }
        data["gameDeckId"] = this.gameDeckId;
        data["gameDeck"] = this.gameDeck ? this.gameDeck.toJSON() : undefined;
        return data;
    }
}
class MoveModel {
    gameId;
    cardId;
    gameDeckCardCollectionId;
    row;
    column;
    userId;
    startTime;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.gameId = _data["gameId"];
            this.cardId = _data["cardId"];
            this.gameDeckCardCollectionId = _data["gameDeckCardCollectionId"];
            this.row = _data["row"];
            this.column = _data["column"];
            this.userId = _data["userId"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MoveModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        data["cardId"] = this.cardId;
        data["gameDeckCardCollectionId"] = this.gameDeckCardCollectionId;
        data["row"] = this.row;
        data["column"] = this.column;
        data["userId"] = this.userId;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        return data;
    }
}
class GameDeckModel {
    id;
    name;
    description;
    gameUserId;
    cardCollection;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.gameUserId = _data["gameUserId"];
            if (Array.isArray(_data["cardCollection"])) {
                this.cardCollection = [];
                for (let item of _data["cardCollection"])
                    this.cardCollection.push(GameDeckCardCollectionModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameDeckModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["gameUserId"] = this.gameUserId;
        if (Array.isArray(this.cardCollection)) {
            data["cardCollection"] = [];
            for (let item of this.cardCollection)
                data["cardCollection"].push(item.toJSON());
        }
        return data;
    }
}
class GameDeckCardCollectionModel {
    id;
    gameDeckId;
    cardId;
    card;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.gameDeckId = _data["gameDeckId"];
            this.cardId = _data["cardId"];
            this.card = _data["card"] ? CardModel.fromJS(_data["card"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GameDeckCardCollectionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameDeckId"] = this.gameDeckId;
        data["cardId"] = this.cardId;
        data["card"] = this.card ? this.card.toJSON() : undefined;
        return data;
    }
}
class StoreItemModel {
    id;
    name;
    description;
    cost;
    itemCount;
    expiry;
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.cost = _data["cost"];
            this.itemCount = _data["itemCount"];
            this.expiry = _data["expiry"] ? new Date(_data["expiry"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StoreItemModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["cost"] = this.cost;
        data["itemCount"] = this.itemCount;
        data["expiry"] = this.expiry ? this.expiry.toISOString() : undefined;
        return data;
    }
}
class ApiException extends Error {
    message;
    status;
    response;
    headers;
    result;
    constructor(message, status, response, headers, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    isApiException = true;
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}


/***/ }),

/***/ 8558:
/*!***********************************************!*\
  !*** ./src/components/shared/AppBootstrap.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppBootstrap": () => (/* binding */ AppBootstrap)
/* harmony export */ });
class AppBootstrap {
    static baseUrl = document.querySelector('base').getAttribute('href');
    static rootElement = document.getElementById('root');
    static url(...parts) {
        return AppBootstrap.baseUrl + parts.join('/');
    }
}


/***/ }),

/***/ 9202:
/*!******************************************************!*\
  !*** ./src/components/shared/CardCollectionCard.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardCollectionCard": () => (/* binding */ CardCollectionCard)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../clients/clients */ 1927);
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles */ 8034);



function CardCollectionCard(props) {
    const card = props.card;
    const onActionClicked = () => {
        if (props.onActionClicked) {
            props.onActionClicked(props.card);
        }
    };
    const actionClassName = "btn btn-sm " + (props.actionClassName || "");
    const rarity = card.card.rarity.id;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "list-group-item d-flex justify-content-between align-items-center", "data-card-collection-id": card.id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("span", { children: [card.card.name, " ", (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "text-rarity_" + _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[rarity].toLowerCase(), title: _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[rarity], children: Array(rarity).fill(0).map((_, i) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: "star" }, i)) })] }), props.actionName &&
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { type: "button", className: actionClassName, disabled: props.actionDisabled, onClick: onActionClicked, children: props.actionName })] }));
}


/***/ }),

/***/ 2464:
/*!********************************************************!*\
  !*** ./src/components/shared/CardCollectionWidget.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardCollectionWidget": () => (/* binding */ CardCollectionWidget)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _CardCollectionCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CardCollectionCard */ 9202);


function CardCollectionWidget(props) {
    const cardCollection = props.cardCollection || [];
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "card", children: [props.title &&
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4", { className: "card-header", children: props.title }), props.subSection &&
                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "card-body", children: props.subSection }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "list-group list-group-flush", children: cardCollection.length > 0 ?
                    (cardCollection.map(cc => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CardCollectionCard__WEBPACK_IMPORTED_MODULE_1__.CardCollectionCard, { card: cc, actionName: props.cardActionName, onActionClicked: props.onCardClicked, actionDisabled: props.cardActionDisabled, actionClassName: props.cardActionClassName }, cc.id)))
                    :
                        ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "list-group-item", children: "No cards" })) })] }));
}


/***/ }),

/***/ 1756:
/*!**********************************************!*\
  !*** ./src/components/shared/CardWidget.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardWidget": () => (/* binding */ CardWidget)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../clients/clients */ 1927);
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles/index */ 8034);



function CardWidget(props) {
    const c = props.card;
    if (!c) {
        return null;
    }
    const rarity = c.rarity.id;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: 'card collection-card card-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[rarity].toLowerCase(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "card-body", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h1", { className: "text-center", title: "Up attack", children: c.upAttack }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h1", { className: "float-right", title: "Right attack", children: c.rightAttack }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h1", { title: "Left attack", children: c.leftAttack }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h1", { className: "text-center", title: "Down attack", children: c.downAttack })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "card-footer", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h2", { className: 'text-center card-rarity-symbols text-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[rarity].toLowerCase(), title: _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[rarity], children: Array(rarity).fill(0).map((_, i) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: "star" }, i)) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h3", { className: "text-center", title: c.name, children: c.name })] })] }));
}


/***/ }),

/***/ 2720:
/*!**********************************************!*\
  !*** ./src/components/shared/CoinFormat.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoinFormat": () => (/* binding */ CoinFormat)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../styles/index */ 8034);


const coinRender = (className, value, stripEmpty) => {
    const shouldStrip = stripEmpty && value === 0;
    if (shouldStrip) {
        return null;
    }
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("span", { className: "coin-group", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_1__.Icon, { icon: "coins", className: className }), ' ', value] }));
};
function CoinFormat(props) {
    if (props.coins < 0)
        return null;
    const c = props.coins;
    const gold = Math.floor(c / 10000);
    const silver = Math.floor(c / 100) % 100;
    const bronze = c % 100;
    const se = props.stripEmpty === true;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("span", { title: props.title, children: [coinRender("coin-gold", gold, se), coinRender("coin-silver", silver, se), coinRender("coin-bronze", bronze, se)] }));
}


/***/ }),

/***/ 1155:
/*!**********************************************!*\
  !*** ./src/components/shared/DateFormat.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateFormat": () => (/* binding */ DateFormat)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _utils_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/date */ 6444);


function DateFormat(props) {
    const d = (0,_utils_date__WEBPACK_IMPORTED_MODULE_1__.relativeFromNow)(props.date);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("time", { title: props.date.toUTCString(), dateTime: (0,_utils_date__WEBPACK_IMPORTED_MODULE_1__.toISOString)(props.date), children: d }));
}


/***/ }),

/***/ 2438:
/*!*******************************************!*\
  !*** ./src/components/shared/DragType.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragType": () => (/* binding */ DragType)
/* harmony export */ });
var DragType;
(function (DragType) {
    DragType[DragType["Card"] = 0] = "Card";
})(DragType || (DragType = {}));


/***/ }),

/***/ 9992:
/*!*************************************************!*\
  !*** ./src/components/shared/ErrorBoundary.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ErrorBoundary": () => (/* binding */ ErrorBoundary)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ErrorView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ErrorView */ 6719);



class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor(props) {
        super(props);
        this.state = {
            hasError: false
        };
    }
    static getDerivedStateFromError(error) {
        const newState = {
            hasError: true,
            error: error,
            currentPage: window.location.href
        };
        if (true) {
            console.error(error);
        }
        return newState;
    }
    componentDidCatch(error, errorInfo) {
        if (true) {
            console.error(error, errorInfo);
        }
    }
    render() {
        if (this.state.hasError) {
            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_ErrorView__WEBPACK_IMPORTED_MODULE_2__.ErrorView, { error: this.state.error, errorInfo: this.state.errorInfo, currentPage: this.state.currentPage });
        }
        return this.props.children;
    }
}


/***/ }),

/***/ 6719:
/*!*********************************************!*\
  !*** ./src/components/shared/ErrorView.tsx ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ErrorView": () => (/* binding */ ErrorView)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../clients/clients */ 1927);
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles/index */ 8034);



function ErrorView(props) {
    const e = props.error;
    const ei = props.errorInfo;
    const cp = props.currentPage || 'N/A';
    const newIssueUrl = new URL("https://github.com/kwokkan/card-hero/issues/new");
    newIssueUrl.searchParams.append('title', e.name + ': ' + e.message);
    newIssueUrl.searchParams.append('body', '### Current page\n' + cp + '\n\n### Stack trace\n```\n' + e.stack + '\n```');
    newIssueUrl.searchParams.append('labels', 'bug');
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "container-fluid body-content", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "row", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "card mx-auto", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("h4", { className: "card-header", children: "Oops" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "card-body", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: "card-text", children: "Looks like some bugs have managed to creep in." }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: "card-text text-center", children: Array(_clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity.Legendary).fill(0).map((_, i) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: "bug", className: 'text-rarity_' + _clients_clients__WEBPACK_IMPORTED_MODULE_1__.Rarity[i + 1].toLowerCase() }, i)) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "card-text text-muted", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("details", { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("summary", { children: [e.name, ": ", e.message] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("pre", { id: "stacktrace", children: e.stack })] }) }), ei &&
                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: "card-text text-muted", children: ei.componentStack })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "card-footer", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("a", { href: newIssueUrl.toString(), className: "btn btn-primary pull-right", target: "_blank", rel: "noreferrer noopener", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_2__.Icon, { icon: "github" }), ' ', "Report an issue"] }) })] }) }) }));
}


/***/ }),

/***/ 3223:
/*!***************************************************!*\
  !*** ./src/components/shared/InlineSearchBar.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InlineSearchBar": () => (/* binding */ InlineSearchBar)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


function InlineSearchBar({ value, onValueUpdated }) {
    const [_value, _setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(value || "");
    const _onValueUpdated = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
        if (onValueUpdated) {
            onValueUpdated(_value);
        }
    }, [_value, onValueUpdated]);
    const onChange = (event) => {
        _setValue(event.currentTarget.value);
    };
    const onKeyUp = (event) => {
        if (event.key === "Enter") {
            _setValue(event.currentTarget.value);
        }
    };
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
        _onValueUpdated();
    }, [_onValueUpdated]);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "input-group", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input", { type: "search", className: "form-control", placeholder: "Search", value: _value, onChange: onChange, onKeyUp: onKeyUp }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "input-group-append", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { type: "button", className: "btn btn-primary", onClick: _onValueUpdated, children: "Search" }) })] }));
}


/***/ }),

/***/ 2286:
/*!*******************************************!*\
  !*** ./src/components/shared/NavMenu.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavMenu": () => (/* binding */ NavMenu)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-router-dom */ 9711);
/* harmony import */ var _styles_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles/index */ 8034);
/* harmony import */ var _utils_route__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/route */ 9743);
/* harmony import */ var _CoinFormat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CoinFormat */ 2720);






function NavMenu(props) {
    const appName = props.appName;
    const routePrefix = (0,_utils_route__WEBPACK_IMPORTED_MODULE_2__.getRoutePrefix)(props.routePrefix);
    const user = props.user;
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("nav", { className: "navbar navbar-dark bg-dark navbar-expand-md fixed-top", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { className: "navbar-toggler navbar-toggler-right", type: "button", "data-toggle": "collapse", "data-target": "#navbar-header", "aria-controls": "navbar-header", "aria-expanded": "false", "aria-label": "Toggle navigation", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_3__.Icon, { icon: "bars" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { to: routePrefix, className: "navbar-brand", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("img", { src: `${routePrefix}favicon.ico`, className: "d-inline-block align-top", width: "32", height: "32", alt: appName }), ' ', appName] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "collapse navbar-collapse", id: "navbar-header", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul", { className: "navbar-nav", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { className: "nav-link", to: `${routePrefix}Card`, children: "Cards" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { className: "nav-link", to: `${routePrefix}Game`, children: "Games" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { className: "nav-link", to: `${routePrefix}Store`, children: "Store" }) }), user &&
                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { className: "nav-link", to: `${routePrefix}Collection`, children: "Collection" }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Link, { className: "nav-link", to: `${routePrefix}Deck`, children: "Decks" }) })] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("ul", { className: "navbar-nav ml-auto", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("a", { className: "nav-link", href: "https://github.com/kwokkan/card-hero", target: "_blank", rel: "noreferrer noopener", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_3__.Icon, { icon: "github" }), ' ', "Fork me"] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("a", { className: "nav-link", href: `${routePrefix}swagger`, target: "_blank", rel: "noreferrer noopener", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_styles_index__WEBPACK_IMPORTED_MODULE_3__.Icon, { icon: "code" }), ' ', "API"] }) }), user ?
                                ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "navbar-text", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CoinFormat__WEBPACK_IMPORTED_MODULE_5__.CoinFormat, { coins: user.coins, title: `You have ${user.coins} coins` }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("li", { className: "nav-item dropdown", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "nav-link dropdown-toggle", id: "user-navbar-dropdown-menu", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false", children: user.fullName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "user-navbar-dropdown-menu", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "dropdown-item", children: "Profile" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "dropdown-item", children: "Active Games" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "dropdown-divider" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "dropdown-item", children: "Settings" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "dropdown-divider" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a", { className: "dropdown-item", href: `${routePrefix}SignOut`, children: "Logout" })] })] })] }))
                                :
                                    ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("li", { className: "nav-item", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a", { className: "nav-link", href: `${routePrefix}SignIn`, children: "Sign in" }) }))] })] })] }));
}


/***/ }),

/***/ 458:
/*!****************************************************!*\
  !*** ./src/components/shared/NotificationItem.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationItem": () => (/* binding */ NotificationItem)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/NotificationType */ 6818);


function typeToCss(type) {
    switch (type) {
        case _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Danger:
            return "badge-danger";
        case _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Info:
            return "badge-info";
        case _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Success:
            return "badge-success";
        case _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Warning:
            return "badge-warning";
        default:
            return "badge-primary";
    }
}
function NotificationItem(props) {
    const typeClass = typeToCss(props.type);
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "notification-item toast fade show", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", { className: "toast-header", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { className: "badge badge-pill badge-secondary mr-2 " + typeClass, children: "\u00A0" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("strong", { className: "mr-auto", children: props.title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { type: "button", className: "ml-2 mb-1 close", "aria-label": "Close", onClick: () => props.onDismiss(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { "aria-hidden": "true", children: "\u00D7" }) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("p", { className: "toast-body", children: props.message })] }));
}


/***/ }),

/***/ 7745:
/*!******************************************************!*\
  !*** ./src/components/shared/NotificationWidget.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationWidget": () => (/* binding */ NotificationWidget)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _contexts_NotificationContextProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../contexts/NotificationContextProvider */ 6655);
/* harmony import */ var _NotificationItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationItem */ 458);



function NotificationWidget() {
    const context = (0,_contexts_NotificationContextProvider__WEBPACK_IMPORTED_MODULE_1__.useNotificationContext)();
    const notifications = context.notifications;
    const onRemove = context.removeNotification;
    return (notifications.length > 0 &&
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: "notifications mr-3", children: notifications.map((x, index) => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_NotificationItem__WEBPACK_IMPORTED_MODULE_2__.NotificationItem, { message: x.message, title: x.title, type: x.type, onDismiss: () => onRemove(x) }, index)) }));
}


/***/ }),

/***/ 6670:
/*!**************************************************!*\
  !*** ./src/components/shared/NumberDropDown.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumberDropDown": () => (/* binding */ NumberDropDown)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);

function NumberDropDown(props) {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("select", { name: props.name, className: "form-control", value: props.value, onChange: props.onChange, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: "10", children: "10" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: "25", children: "25" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: "50", children: "50" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("option", { value: "100", children: "100" })] }));
}


/***/ }),

/***/ 6692:
/*!****************************************!*\
  !*** ./src/contexts/AccountContext.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountContext": () => (/* binding */ AccountContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const AccountContext = react__WEBPACK_IMPORTED_MODULE_0___default().createContext({ setUser: (_user) => { } });


/***/ }),

/***/ 5166:
/*!*************************************************!*\
  !*** ./src/contexts/AccountContextProvider.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountContextProvider": () => (/* binding */ AccountContextProvider),
/* harmony export */   "useAccountContext": () => (/* binding */ useAccountContext)
/* harmony export */ });
/* unused harmony export useAccountContextConsumer */
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _AccountContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AccountContext */ 6692);



function AccountContextProvider(props) {
    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
        user: props.value.user
    });
    const contextProps = {
        setUser: (user) => {
            setState({
                user: user
            });
        },
        user: state.user
    };
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_AccountContext__WEBPACK_IMPORTED_MODULE_2__.AccountContext.Provider, { value: contextProps, children: props.children }));
}
function useAccountContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_AccountContext__WEBPACK_IMPORTED_MODULE_2__.AccountContext);
}
function useAccountContextConsumer() {
    return AccountContext.Consumer;
}



/***/ }),

/***/ 448:
/*!*********************************************!*\
  !*** ./src/contexts/NotificationContext.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationContext": () => (/* binding */ NotificationContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const NotificationContext = react__WEBPACK_IMPORTED_MODULE_0___default().createContext({
    notifications: [],
    addNotification: (_notification) => { },
    removeNotification: (_notification) => { }
});


/***/ }),

/***/ 6655:
/*!******************************************************!*\
  !*** ./src/contexts/NotificationContextProvider.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationContextProvider": () => (/* binding */ NotificationContextProvider),
/* harmony export */   "useNotificationContext": () => (/* binding */ useNotificationContext)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 7294);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _NotificationContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationContext */ 448);



function NotificationContextProvider(props) {
    const [notificationsState, setNotificationsState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((props.value || {}).notifications || []);
    const contextProps = {
        addNotification: (notification) => {
            const newNotifications = [...notificationsState];
            newNotifications.push(notification);
            setNotificationsState(newNotifications);
        },
        removeNotification: (notification) => {
            const notifications = [...notificationsState];
            const index = notifications.indexOf(notification);
            if (index > -1) {
                notifications.splice(index, 1);
                setNotificationsState(notifications);
            }
        },
        notifications: notificationsState
    };
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_NotificationContext__WEBPACK_IMPORTED_MODULE_2__.NotificationContext.Provider, { value: contextProps, children: props.children }));
}
function useNotificationContext() {
    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_NotificationContext__WEBPACK_IMPORTED_MODULE_2__.NotificationContext);
}



/***/ }),

/***/ 7662:
/*!****************************************!*\
  !*** ./src/services/AccountService.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountService": () => (/* binding */ AccountService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class AccountService {
    static async getAccount() {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.AccountApiClient();
        const model = await client.get();
        return model;
    }
}


/***/ }),

/***/ 1138:
/*!***********************************************!*\
  !*** ./src/services/CardCollectionService.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardCollectionService": () => (/* binding */ CardCollectionService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class CardCollectionService {
    static async getCollection(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.CollectionApiClient();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.name, filter.ids, filter.page, filter.pageSize);
        return model;
    }
}


/***/ }),

/***/ 2241:
/*!*****************************************!*\
  !*** ./src/services/CardPackService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardPackService": () => (/* binding */ CardPackService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class CardPackService {
    static async getCardPacks() {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.CardPackApiClient();
        const model = client.get();
        return model;
    }
}


/***/ }),

/***/ 8343:
/*!*************************************!*\
  !*** ./src/services/CardService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CardService": () => (/* binding */ CardService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class CardService {
    static favouriteCard(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.CardApiClient();
        return client.favourite(id);
    }
    static async getCards(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.CardApiClient();
        const model = client.get(filter.ids, filter.name, filter.cardPackId, filter.page, filter.pageSize);
        return model;
    }
}


/***/ }),

/***/ 2905:
/*!*************************************!*\
  !*** ./src/services/DeckService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeckService": () => (/* binding */ DeckService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class DeckService {
    static favouriteCard(id, favourite) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckApiClient();
        const data = {
            isFavourited: favourite
        };
        const model = _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckModel.fromJS(data);
        return client.favourite(id, model);
    }
    static async getDeckById(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckApiClient();
        const model = await client.getById(id);
        return model;
    }
    static async getDecks(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckApiClient();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.ids, filter.name, filter.page, filter.pageSize);
        return model;
    }
    static async createDeck(model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckApiClient();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckCreateModel();
        postModel.name = model.name;
        postModel.description = model.description;
        var newModel = await client.create(postModel);
        return newModel;
    }
    static async patchDeck(id, model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckApiClient();
        var patchModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.DeckModel(model);
        var newModel = await client.patch(id, patchModel);
        return newModel;
    }
}


/***/ }),

/***/ 8487:
/*!*****************************************!*\
  !*** ./src/services/GamePlayService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GamePlayService": () => (/* binding */ GamePlayService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class GamePlayService {
    static async getGamePlayById(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GamePlayApiClient();
        const model = await client.getById(id);
        return model;
    }
    static async move(id, model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GamePlayApiClient();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.MoveModel(model);
        const newModel = await client.move(id, postModel);
        return newModel;
    }
}


/***/ }),

/***/ 2759:
/*!*************************************!*\
  !*** ./src/services/GameService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GameService": () => (/* binding */ GameService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class GameService {
    static async getGameById(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GameApiClient();
        const model = await client.getById(id);
        return model;
    }
    static async getGames(filter) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GameApiClient();
        if (!filter) {
            filter = {};
        }
        const model = await client.get(filter.gameId, filter.name, undefined, undefined, undefined, filter.activeOnly, undefined, filter.page, filter.pageSize, undefined);
        return model;
    }
    static async createGame(model) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GameApiClient();
        const newModel = await client.post(model);
        return newModel;
    }
    static async join(id, deckId) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GameApiClient();
        const postModel = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.GameJoinModel({
            deckId: deckId
        });
        await client.join(id, postModel);
    }
}


/***/ }),

/***/ 8001:
/*!**************************************!*\
  !*** ./src/services/StoreService.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StoreService": () => (/* binding */ StoreService)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);

class StoreService {
    static async getStoreItems() {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.StoreApiClient();
        const model = await client.get();
        return model;
    }
    static async buyCardBundle(id) {
        const client = new _clients_clients__WEBPACK_IMPORTED_MODULE_0__.StoreApiClient();
        const model = await client.buyStoreItem(id);
        return model;
    }
}


/***/ }),

/***/ 8034:
/*!******************************!*\
  !*** ./src/styles/index.tsx ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Icon": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ 5893);
/* harmony import */ var _fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ 8947);
/* harmony import */ var _fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fortawesome/free-brands-svg-icons */ 1417);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ 1436);
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ 7814);





_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_1__.config.autoAddCss = false;
_fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__.faGithub.prefix = "fas";
_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_1__.library.add(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faBars, _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faBug, _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faCode, _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faCoins, _fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__.faGithub, _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faPlus, _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_4__.faStar);
function Icon(props) {
    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__.FontAwesomeIcon, { icon: props.icon, fixedWidth: true, ...props }));
}


/***/ }),

/***/ 5939:
/*!***********************************!*\
  !*** ./src/utils/clientHelper.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "run": () => (/* binding */ run)
/* harmony export */ });
/* harmony import */ var _clients_clients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../clients/clients */ 1927);
/* harmony import */ var _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/NotificationType */ 6818);


async function run(context, action) {
    const { addNotification } = context;
    try {
        await action();
    }
    catch (e) {
        if (e instanceof _clients_clients__WEBPACK_IMPORTED_MODULE_0__.ErrorViewModel) {
            addNotification({
                message: e.message,
                type: _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Danger
            });
        }
        else if (e instanceof _clients_clients__WEBPACK_IMPORTED_MODULE_0__.ApiException) {
            addNotification({
                message: e.message,
                title: e.name,
                type: _types_NotificationType__WEBPACK_IMPORTED_MODULE_1__.NotificationType.Danger
            });
        }
        else {
            throw e;
        }
    }
}


/***/ }),

/***/ 6444:
/*!***************************!*\
  !*** ./src/utils/date.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relativeFromNow": () => (/* binding */ relativeFromNow),
/* harmony export */   "toISOString": () => (/* binding */ toISOString)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ 7484);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs/plugin/relativeTime */ 4110);
/* harmony import */ var dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1__);


dayjs__WEBPACK_IMPORTED_MODULE_0___default().extend((dayjs_plugin_relativeTime__WEBPACK_IMPORTED_MODULE_1___default()));
function relativeFromNow(date) {
    return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(date).fromNow();
}
function toISOString(date) {
    return dayjs__WEBPACK_IMPORTED_MODULE_0___default()(date).toISOString();
}


/***/ }),

/***/ 9743:
/*!****************************!*\
  !*** ./src/utils/route.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRoutePrefix": () => (/* binding */ getRoutePrefix)
/* harmony export */ });
const getRoutePrefix = (prefix) => {
    if (!prefix) {
        return "/";
    }
    if (prefix.endsWith("/")) {
        return prefix;
    }
    return prefix + "/";
};


/***/ })

}]);